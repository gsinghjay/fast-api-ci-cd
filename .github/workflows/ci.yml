name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_call:
    secrets:
      token:
        required: true
        description: "GitHub token for authentication"
    outputs:
      venv-name:
        description: "Name of the virtual environment artifact"
        value: ${{ jobs.setup.outputs.venv-name }}
  workflow_dispatch:

jobs:
  setup:
    name: Setup Environment
    uses: ./.github/workflows/setup-python.yml
    with:
      python-version: "3.11"

  lint:
    name: Lint Check
    needs: [setup]
    uses: ./.github/workflows/lint.yml
    with:
      venv-name: ${{ needs.setup.outputs.venv-name }}
      python-version: "3.11"
    permissions:
      contents: read
      pull-requests: read
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    needs: [setup]
    uses: ./.github/workflows/test.yml
    with:
      venv-name: ${{ needs.setup.outputs.venv-name }}
      python-version: "3.11"
    permissions:
      contents: read
      checks: write

  release:
    name: Create Release
    needs: [lint, test, setup]
    if: |
      github.ref == 'refs/heads/main' &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore(release)') &&
      github.actor != 'github-actions[bot]' &&
      github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Download virtual environment
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup.outputs.venv-name }}
          path: artifact
          merge-multiple: true

      - name: Restore virtual environment
        run: |
          if [ ! -f "artifact/venv.tar.gz" ]; then
            echo "ERROR: venv.tar.gz not found in artifact"
            exit 1
          fi
          tar xzf artifact/venv.tar.gz
          cp artifact/poetry.lock .
          cp artifact/pyproject.toml .
          chmod -R +x .venv/bin/

      - name: Debug Environment
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Virtual env contents:"
          ls -la .venv/bin || echo "No .venv/bin directory"
          echo "Poetry location:"
          which poetry || echo "Poetry not found in PATH"

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v8.7.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Version Files
        run: |
          poetry run semantic-release version --noop
          poetry run semantic-release check-build

      - name: Verify Release
        if: success()
        run: |
          poetry run semantic-release version --print
          git describe --tags --abbrev=0
