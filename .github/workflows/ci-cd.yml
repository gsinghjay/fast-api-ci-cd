# File: .github/workflows/ci-cd.yml

# Name of the workflow as it appears in the GitHub Actions tab
name: CI/CD Pipeline

# Define the events that trigger the workflow
on:
  # Trigger the workflow on push events to specific branches or tags
  push:
    branches: 
      - "dev"      # Development branch
      - "main"     # Main/Production branch
    tags:
      - "v*"        # Tags following the pattern 'v*' (e.g., v1.0.0)
  # Trigger the workflow on pull request events targeting specific branches
  pull_request:
    branches: 
      - "dev"
      - "main"

# Define permissions for the entire workflow
permissions:
  contents: write   # Grants write access to contents, necessary for deleting tags

# Control concurrency to ensure only the latest run for a branch/tag is active
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true  # Cancels any in-progress runs for the same ref

# Define all jobs within the workflow
jobs:
  ##########################################################################
  # 1. Lint Job
  ##########################################################################
  lint:
    name: Lint
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Set up Node (for Commitlint)
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Specify Node.js version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}  # Unique cache key based on OS and poetry.lock
          restore-keys: |
            ${{ runner.os }}-poetry-  # Fallback keys

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm  # npm cache directory
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}  # Unique cache key based on OS and package-lock.json
          restore-keys: |
            ${{ runner.os }}-npm-  # Fallback keys

      - name: Install dependencies
        run: |
          # Install Python dependencies via Poetry without installing the root package
          pip install poetry
          poetry install --no-root

          # Install Black directly (in case poetry install fails)
          pip install black

      - name: Lint code with Black
        run: poetry run black --check .  # Run black through poetry

      - name: Check commit messages with Commitlint
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: commitlint.config.js
          failOnWarnings: true

  ##########################################################################
  # 2. Test Job
  ##########################################################################
  test:
    name: Test
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: lint  # Ensure the 'lint' job completes before starting 'test'
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]  # Updated Python versions for matrix testing
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Use the Python version from the matrix

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-py${{ matrix.python-version }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-poetry-py${{ matrix.python-version }}-  # Fallback keys

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root  # Install dependencies without the root package

      - name: Run tests with coverage
        run: |
          coverage run -m pytest  # Run tests with coverage
          coverage report -m      # Generate coverage report
          coverage xml            # Generate coverage XML for artifact

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-py${{ matrix.python-version }}  # Name of the artifact
          path: coverage.xml  # Path to the coverage report

  ##########################################################################
  # 3. Release Job (Runs only on tags that match v*)
  ##########################################################################
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')  # Only run on tag pushes matching 'v*'
    needs: test  # Ensure the 'test' job completes before starting 'release'
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Set up Node (for Commitlint)
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Specify Node.js version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-poetry-  # Fallback keys

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm  # npm cache directory
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-npm-  # Fallback keys

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root  # Install Python dependencies without the root package
          pip install python-semantic-release  # Install Semantic Release for Python
          npm install -g @commitlint/cli @commitlint/config-conventional  # Install Commitlint globally

      - name: Verify Tag is on main Branch
        run: |
          # Fetch all branches to ensure origin/main is up to date
          git fetch origin main

          # Get the commit SHA that the tag points to
          TAG_COMMIT_SHA=$(git rev-parse $GITHUB_REF)

          # Get the latest commit SHA on main
          MAIN_COMMIT_SHA=$(git rev-parse origin/main)

          # Compare the tag commit SHA with the latest commit on main
          if [ "$TAG_COMMIT_SHA" != "$MAIN_COMMIT_SHA" ]; then
            echo "Error: Tag $GITHUB_REF is not pointing to the latest commit on main."
            exit 1  # Exit with error if the tag is not on the latest main commit
          fi

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for release creation
        run: |
          semantic-release publish  # Execute Semantic Release to publish and tag

  ##########################################################################
  # 4. Tag Validation Job
  ##########################################################################
  tag-validation:
    name: Tag Validation
    if: startsWith(github.ref, 'refs/tags/v')  # Only run on tag pushes matching 'v*'
    needs: release  # Ensure the 'release' job completes before starting 'tag-validation'
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Get Tag Details
        id: tag_details  # Assign an ID to reference outputs in subsequent steps
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}  # Extract the tag name from the ref
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT  # Set the tag_name output
          
          # Get tagger information using git for-each-ref
          TAGGER_NAME=$(git for-each-ref refs/tags/$TAG_NAME --format='%(taggername)')
          TAGGER_EMAIL=$(git for-each-ref refs/tags/$TAG_NAME --format='%(taggeremail)')
          echo "tagger_name=${TAGGER_NAME}" >> $GITHUB_OUTPUT  # Set the tagger_name output
          echo "tagger_email=${TAGGER_EMAIL}" >> $GITHUB_OUTPUT  # Set the tagger_email output

      - name: Validate Tagger
        run: |
          # Define the expected tagger name/email (GitHub Actions bot)
          EXPECTED_TAGGER_NAME="github-actions[bot]"
          EXPECTED_TAGGER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          
          # Compare the actual tagger name and email with the expected values
          if [ "${{ steps.tag_details.outputs.tagger_name }}" != "$EXPECTED_TAGGER_NAME" ] || [ "${{ steps.tag_details.outputs.tagger_email }}" != "$EXPECTED_TAGGER_EMAIL" ]; then
            echo "Error: Tag ${{ steps.tag_details.outputs.tag_name }} was not created by GitHub Actions."
            # Delete the unauthorized tag using git push with :refs/tags/tag_name
            git push origin :refs/tags/${{ steps.tag_details.outputs.tag_name }}
            exit 1  # Exit with error if validation fails
          fi

      - name: Approve Tag
        run: echo "Tag ${{ steps.tag_details.outputs.tag_name }} is valid and created by GitHub Actions."  # Confirmation message

  ##########################################################################
  # 5. Update dev Branch to Next Dev Version
  ##########################################################################
  update-dev-version:
    name: Update dev Branch Version
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only run on pushes to main
    needs: release  # Ensure the 'release' job completes before starting 'update-dev-version'
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      - name: Check out dev branch
        uses: actions/checkout@v3
        with:
          ref: dev  # Ensure you're checking out the dev branch

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-poetry-  # Fallback keys

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root  # Install dependencies without the root package
          pip install python-semantic-release  # Install Semantic Release for Python

      - name: Update Version to Next Dev Version
        run: |
          # Configure Semantic Release for dev branch to bump to the next dev version
          semantic-release version --version-dev

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for pushing changes
        run: |
          # Configure Git user for committing
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add app/__init__.py  # Updated path to match our project structure
          git commit -m "chore(release): bump version to next dev version [skip ci]"  # Commit message with [skip ci] to prevent triggering workflows
          git push origin dev  # Push changes to the dev branch

  ##########################################################################
  # 6. Post-Merge Verification Job
  ##########################################################################
  post-merge-verification:
    name: Post-Merge Verification
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only run on pushes to main
    needs: [lint, test, release, update-dev-version]  # Ensure all prior jobs complete successfully
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-poetry-  # Fallback keys

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root  # Install dependencies without the root package

      - name: Run critical post-merge checks
        run: |
          # Re-run essential tests to ensure stability after merging
          coverage run -m pytest
          coverage report -m
          # Optionally, add deployment steps here (e.g., deploy to production)

      - name: Notify Deployment Success
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🚀 Deployment to Production Successful! 🎉'
            })
