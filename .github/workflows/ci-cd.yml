# File: .github/workflows/ci-cd.yml

# Name of the workflow as it appears in the GitHub Actions tab
name: CI/CD Pipeline

# Define the events that trigger the workflow
on:
  # Trigger the workflow on push events to any branch
  push:
    branches:
      - "**"  # Match all branches
    tags:
      - "v*"  # Tags following the pattern 'v*' (e.g., v1.0.0)
    # Add paths-ignore to exclude changelog updates
    paths-ignore:
      - 'CHANGELOG.md'
  # Trigger the workflow on pull request events targeting any branch
  pull_request:
    branches:
      - "**"  # Match all branches
  # Allow manual workflow dispatch with parameters
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create a prerelease version'
        type: boolean
        required: false
        default: false
      prerelease_token:
        description: 'Token for prerelease version (e.g., alpha, beta)'
        type: string
        required: false
      force:
        description: 'Force version bump (patch, minor, major, or none)'
        type: string
        required: false
        default: 'none'
      build_metadata:
        description: 'Build metadata to append to version'
        type: string
        required: false

# Define permissions for the entire workflow
permissions:
  contents: write      # Required for creating releases and pushing tags
  pull-requests: write # Required for creating pull requests
  checks: write       # Required for status checks
  issues: write       # Required for creating issues
  statuses: write     # Required for commit statuses
  discussions: write  # Required for discussions (if used)

# Control concurrency to ensure only the latest run for a branch/tag is active
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Define all jobs within the workflow
jobs:
  ##########################################################################
  # 1. Lint Job
  ##########################################################################
  lint:
    if: |
      (github.event_name == 'pull_request') ||
      (github.actor != 'github-actions[bot]' &&
       !contains(github.event.head_commit.message, '[skip ci]') &&
       !contains(github.event.head_commit.message, '[ci skip]') &&
       !contains(github.event.head_commit.message, '[no ci]') &&
       !contains(github.event.head_commit.message, 'chore(release)'))
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3  # Checks out the repository code

      - name: Set up Node (for Commitlint)
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Specify Node.js version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"  # Use latest stable Python version

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}  # Unique cache key based on OS and poetry.lock
          restore-keys: |
            ${{ runner.os }}-poetry-  # Fallback keys

      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm  # npm cache directory
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}  # Unique cache key based on OS and package-lock.json
          restore-keys: |
            ${{ runner.os }}-npm-  # Fallback keys

      - name: Install dependencies
        run: |
          # Install specific version of Poetry
          pip install poetry==1.8.5

          # Generate poetry.lock if it doesn't exist or if pyproject.toml has changed
          poetry lock --no-update

          # Install dependencies
          poetry install --no-root

          # Install semantic release separately to avoid conflicts
          pip install python-semantic-release==9.15.0

      - name: Lint code with Black
        run: poetry run black --check .  # Run black through poetry

      - name: Check commit messages with Commitlint
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: commitlint.config.js
          failOnWarnings: true

  ##########################################################################
  # 2. Test Job
  ##########################################################################
  test:
    if: |
      (github.event_name == 'pull_request') ||
      (github.actor != 'github-actions[bot]' &&
       !contains(github.event.head_commit.message, '[skip ci]') &&
       !contains(github.event.head_commit.message, '[ci skip]') &&
       !contains(github.event.head_commit.message, '[no ci]') &&
       !contains(github.event.head_commit.message, 'chore(release)'))
    name: Test
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: lint  # Ensure the 'lint' job completes before starting 'test'
    strategy:
      matrix:
        python-version: ["3.11"]  # Only test with Python 3.11
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
          ref: ${{ github.head_ref }}  # Checkout the PR branch

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry  # Poetry cache directory
            ~/.cache/pip        # pip cache directory
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-py${{ matrix.python-version }}  # Unique cache key
          restore-keys: |
            ${{ runner.os }}-poetry-py${{ matrix.python-version }}-  # Fallback keys

      - name: Install dependencies
        run: |
          pip install poetry

          # Generate poetry.lock if it doesn't exist or if pyproject.toml has changed
          poetry lock --no-update

          # Install dependencies
          poetry install --no-root  # Install dependencies without the root package

      - name: Run tests with coverage
        run: |
          poetry run coverage run -m pytest  # Run tests with coverage
          poetry run coverage report -m      # Generate coverage report
          poetry run coverage xml            # Generate coverage XML for artifact

      - name: Update Changelog
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Install semantic release
          pip install python-semantic-release==9.15.0

          # Configure git with token
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Generate changelog
          semantic-release changelog

          # Commit and push if there are changes
          if [[ -n $(git status --porcelain CHANGELOG.md) ]]; then
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md [skip ci]"
            git push origin HEAD:${{ github.head_ref }}
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-py${{ matrix.python-version }}  # Name of the artifact
          path: coverage.xml  # Path to the coverage report

  ##########################################################################
  # 3. Release Job (Runs only on tags that match v*)
  ##########################################################################
  release:
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      (github.actor != 'github-actions[bot]' ||
       (!contains(github.event.head_commit.message, '[skip ci]') &&
        !contains(github.event.head_commit.message, '[ci skip]') &&
        !contains(github.event.head_commit.message, '[no ci]') &&
        !contains(github.event.head_commit.message, 'chore(release)')))
    name: Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install poetry==1.8.5
          poetry install --no-root
          pip install python-semantic-release==9.15.0

      - name: Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.15.0
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          git_committer_name: "github-actions[bot]"
          git_committer_email: "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Publish to GitHub Release Assets
        uses: python-semantic-release/publish-action@v9.15.0
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Verify Release
        if: success()
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "=== Verifying Release ==="
          # Get the latest version from git tags
          VERSION=$(git describe --tags --abbrev=0)
          VERSION=${VERSION#v}  # Remove 'v' prefix
          echo "Latest version tag: v${VERSION}"

          # Check if release exists
          if ! gh release view "v${VERSION}" &>/dev/null; then
            echo "Error: Release v${VERSION} was not created successfully"
            exit 1
          fi

          # Get release type
          if [[ "${VERSION}" == *"-beta."* ]]; then
            echo "Successfully verified beta release v${VERSION}"
          elif [[ "${VERSION}" == *"-rc."* ]]; then
            echo "Successfully verified release candidate v${VERSION}"
          else
            echo "Successfully verified stable release v${VERSION}"
          fi

  ##########################################################################
  # 4. Tag Validation Job
  ##########################################################################
  tag-validation:
    name: Tag Validation
    if: startsWith(github.ref, 'refs/tags/v')  # Only run on tag pushes matching 'v*'
    needs: release  # Ensure the 'release' job completes before starting 'tag-validation'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history for tags
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get Tag Details
        id: tag_details
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

          # Get tagger information using git for-each-ref
          TAGGER_NAME=$(git for-each-ref refs/tags/$TAG_NAME --format='%(taggername)')
          TAGGER_EMAIL=$(git for-each-ref refs/tags/$TAG_NAME --format='%(taggeremail)')
          echo "tagger_name=${TAGGER_NAME}" >> $GITHUB_OUTPUT
          echo "tagger_email=${TAGGER_EMAIL}" >> $GITHUB_OUTPUT

      - name: Validate Tagger
        run: |
          # Define the expected tagger name/email (GitHub Actions bot)
          EXPECTED_TAGGER_NAME="github-actions[bot]"
          EXPECTED_TAGGER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"

          # Compare the actual tagger name and email with the expected values
          if [ "${{ steps.tag_details.outputs.tagger_name }}" != "$EXPECTED_TAGGER_NAME" ] || [ "${{ steps.tag_details.outputs.tagger_email }}" != "$EXPECTED_TAGGER_EMAIL" ]; then
            echo "Error: Tag ${{ steps.tag_details.outputs.tag_name }} was not created by GitHub Actions."
            # Delete the unauthorized tag using git push with :refs/tags/tag_name
            git push origin :refs/tags/${{ steps.tag_details.outputs.tag_name }}
            exit 1  # Exit with error if validation fails
          fi

      - name: Approve Tag
        run: echo "Tag ${{ steps.tag_details.outputs.tag_name }} is valid and created by GitHub Actions."

  ##########################################################################
  # Jobs end after release
  ##########################################################################
